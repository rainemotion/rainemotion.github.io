<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>只是无聊而已</title>
  
  <subtitle>我想静静</subtitle>
  <link href="http://rainemotion.github.io/atom.xml" rel="self"/>
  
  <link href="http://rainemotion.github.io/"/>
  <updated>2024-04-24T15:50:49.935Z</updated>
  <id>http://rainemotion.github.io/</id>
  
  <author>
    <name>好大一杯水果茶</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>有关c语言输入缓冲区的基础问题</title>
    <link href="http://rainemotion.github.io/2024/04/23/c%E8%AF%AD%E8%A8%80%E4%B9%8B%E8%BE%93%E5%85%A5%E7%BC%93%E5%86%B2%E5%8C%BA/"/>
    <id>http://rainemotion.github.io/2024/04/23/c%E8%AF%AD%E8%A8%80%E4%B9%8B%E8%BE%93%E5%85%A5%E7%BC%93%E5%86%B2%E5%8C%BA/</id>
    <published>2024-04-23T14:21:32.231Z</published>
    <updated>2024-04-24T15:50:49.935Z</updated>
    
    <content type="html"><![CDATA[<h1 id="缓冲区是什么"><a href="#缓冲区是什么" class="headerlink" title="缓冲区是什么"></a>缓冲区是什么</h1><p>​        <strong>缓冲区</strong>（Buffer)是内存空间的一部分。也就是说，在内存中预留了一定的存储空间，用来暂时保存输入或输出的数据，这部分预留的空间就叫做缓冲区。缓冲区根据其对应的是输入设备还是输出设备，分为<em><strong>输入缓冲区</strong></em>和<em><strong>输出缓冲区</strong></em>。</p><p><strong>输入缓冲区及例子</strong></p><p>​        <strong>输入缓冲区</strong>是我们经常忽视而导致出错的知识点。scanf和getchar等输入函数存在输入缓存用户从键盘输入内容,并按下<strong>回车键</strong>(即换行’\n’)确认,之后,输入的字符将进入输入缓冲区，然后输入函数便从输入缓冲区获取字符，并删除缓存区已获取的字符。</p><p>​    <strong>下面举几个例子来具体分析一下</strong>,</p><h2 id="scanf"><a href="#scanf" class="headerlink" title="scanf"></a>scanf</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> a, b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;a);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c %c&quot;</span>, a, b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们输入a和\n时，会出现：</p><p><img src="/../images/20240423202241720.png"></p><p>当我们输入a和回车键(即’\n’时)，输入缓存区上此时有两个字符，分别是a和\n。于是，第一个scanf将a从输入缓冲区取出并打印在终端上，scanf()作单字符输入时规定只接收一个字符，<strong>但它却把回车符也作为字符对待的</strong>。于是第二个scanf则直接将输入缓冲区还存在的\n取出并打印在终端显示屏上，就有了如图所示的结果。</p><p><strong>正确做法如下：</strong></p><p><img src="/../images/20240423203622053.png"></p><p>有了scanf(“ %c”,&amp;c)这个空格（换成\n或者\t也可以），<strong>这样就把缓冲区中的回车当成第一个字符，读取后丢掉</strong>。</p><h2 id="getchar"><a href="#getchar" class="headerlink" title="getchar"></a>getchar</h2><h3 id="getchar的用法"><a href="#getchar的用法" class="headerlink" title="getchar的用法"></a><strong>getchar的用法</strong></h3><p>getchar()函数的作用是从stdin (标准输入——键盘）获取字符，他的返回值类型是int，因为字符在存储时是以阿斯克码值存储的，所以getchar()读取的是<strong>一个</strong>字符而返回的却是<strong>整形</strong>，返回整形是返回了他的<strong>阿斯克码值</strong>，当getchar()读取错误的时候会返回EOF，EOF的含义就是end of file，是文件的结束标志。我们可以在编译器中转到定义发现EOF就是-1，也符合getchar()函数的返回值类型int。</p><h3 id="getchar例子"><a href="#getchar例子" class="headerlink" title="getchar例子"></a><strong>getchar例子</strong></h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ch;</span><br><span class="line"><span class="keyword">while</span> ((ch = getchar()) != EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">putchar</span>(ch);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/20240423205647993.png"></p><p>将getchar()函数放在while循环当中作为条件，就可以实现连续输入和打印。用户键盘输入进入判断，如果getchar()正常获取字符那么我们进入循环打印字符，再次输入，如果getchar()获取字符异常返回EOF，那么就跳出循环。前面已经说过，getchar读取缓冲区内的<strong>一个</strong>字符，所以，每次循环读取缓冲区中的一个字符，直到缓冲区内字符都被读取完成后，继续在键盘上输入字符并存在输入缓冲区里，之后继续循环，每次读取缓冲区的一个字符，直到读取错误(即返回EOF)。</p><h1 id="如何清理缓冲区的字符"><a href="#如何清理缓冲区的字符" class="headerlink" title="如何清理缓冲区的字符"></a>如何清理缓冲区的字符</h1><h2 id="用rewind函数刷新缓冲区"><a href="#用rewind函数刷新缓冲区" class="headerlink" title="用rewind函数刷新缓冲区"></a>用rewind函数刷新缓冲区</h2><blockquote><p>用rewind(stdin);<strong>rewind函数是把指定流的读写指针重新指向开头。</strong></p></blockquote><p><img src="/../images/20240423211826508.png"></p><h2 id="用getchar-来清理缓冲区"><a href="#用getchar-来清理缓冲区" class="headerlink" title="用getchar();来清理缓冲区"></a>用getchar();来清理缓冲区</h2><blockquote><p>用getchar()函数，提前将缓冲区中的<code>\n</code>取走，就可达到我们想要的目的，这样的方法叫做清理缓冲区</p></blockquote><p><img src="/../images/20240423212422895.png"></p><p>如图我们将getchar()放入while循环当中就可以实现缓冲区中多个字符的清除，当scanf进入缓冲区获取字符时会拿取asdf，遇到空格scanf停止获取，之后进入循环getchar()进入缓冲区读取字符，只要没有读到\n循环就继续循环，遍历完缓冲区字符后，最后获取\n跳出循环，进行后一步操作。</p><h1 id="gets-与fgets"><a href="#gets-与fgets" class="headerlink" title="gets()与fgets()"></a>gets()与fgets()</h1><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>1、虽然用 gets() 时有空格也可以直接输入，但是 gets() 有一个非常大的缺陷，即它不检查预留存储区是否能够容纳实际输入的数据，换句话说，如果输入的字符数目大于数组的长度，gets 无法检测到这个问题，就会发生内存越界，一般用fgets().</p><p>2、 fgets() 和 gets() 一样，最后的回车都会从缓冲区中取出来。<strong>只不过 gets() 是取出来丢掉，而 fgets() 是取出来自己留着</strong>。但总之缓冲区中是没有回车了！所以与 gets() 一样，在使用 fgets() 的时候，如果后面要从键盘给字符变量赋值，那么同样<strong>不需要清空缓冲区</strong>。</p><blockquote><p> <strong>fgets(str, 7, stdin);  从输入流stdin即输入缓冲区中读取7个字符到字符数组str中</strong></p></blockquote><p>3、所以假如你定义的字符数组长度为 n，那么 fgets() 中的 size 就指定为 n–1，留一个给 ‘\0’ 就行了。但是需要注意的是，如果输入的字符串长度没有超过 n–1，那么系统会将最后输入的换行符 ‘\n’ 保存进来，<strong>保存的位置是紧跟输入的字符</strong>，然后剩余的空间都用 <strong>‘\0’ 填充</strong>。所以此时输出该字符串时 printf 中就不需要加换行符 ‘\n’ 了，因为字符串中已经有了。</p><h2 id="有关缓冲区的例子："><a href="#有关缓冲区的例子：" class="headerlink" title="有关缓冲区的例子："></a>有关缓冲区的例子：</h2><h3 id="用fgets"><a href="#用fgets" class="headerlink" title="用fgets()"></a>用fgets()</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">char</span> str[<span class="number">30</span>];</span><br><span class="line"> <span class="type">char</span> ch;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;请输入字符串：&quot;</span>);</span><br><span class="line"> fgets(str, <span class="number">29</span>, <span class="built_in">stdin</span>);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, str);  <span class="comment">//后面不要加&#x27;\n&#x27;</span></span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;ch);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;ch = %c\n&quot;</span>, ch);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果是：</strong><br>请输入字符串：i love you<br>i love you<br>Y<br>ch &#x3D; Y</p><h3 id="用gets"><a href="#用gets" class="headerlink" title="用gets()"></a>用gets()</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">char str[30];</span><br><span class="line">char ch;</span><br><span class="line">printf(&quot;请输入字符串：&quot;);</span><br><span class="line">gets(str);</span><br><span class="line">printf(&quot;%s&quot;, str);  //后面不要加&#x27;\n&#x27;</span><br><span class="line">scanf(&quot;%c&quot;, &amp;ch);</span><br><span class="line">printf(&quot;ch = %c\n&quot;, ch);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/20240423221106147.png"></p><p>输入同样的数据，结果却不一样，如图所示，再一次说明了fgets() 和 gets() 一样，最后的回车都会从缓冲区中取出来。只不过 gets() 是取出来<strong>丢掉</strong>，而 fgets() 是取出来<strong>自己留着</strong>。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote><p>1、rewind通过<strong>刷新缓冲区</strong>(相当于能瞬间将缓冲区还存在的所有字符清除)。</p><p>2、getchar则只能每次读取缓冲区的<strong>一个字符</strong>来清理缓冲区，一般需要通过<strong>循环</strong>来清理缓冲区，使用**while((ch &#x3D; getchar()) !&#x3D; ‘\n’ &amp;&amp; ch !&#x3D; EOF)**（万能代码）。</p><p>3、scanf遇到<strong>空格</strong>和<strong>\n</strong>会停止从缓冲区读取字符。</p><p>4、getchar()函数的作用是从标准输入键盘中<strong>读取一个字符</strong>。</p><p>5、getchar()的返回值类型为<strong>整形</strong>，返回的是读取到字符的<strong>阿斯克码值</strong>。</p><p>6、当getchar()函数读取失败时，<strong>返回EOF</strong>文件的结束标志。</p><p>7、fgets(str, 7, stdin);  表示从输入流stdin即<strong>输入缓冲区</strong>中读取7个字符到字符数组str中。</p><p>8、fgets() 和 gets() 一样，最后的回车都会从缓冲区中取出来。只不过 gets() 是取出来<strong>丢掉</strong>，而 fgets() 是取出来<strong>自己留着</strong>。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;缓冲区是什么&quot;&gt;&lt;a href=&quot;#缓冲区是什么&quot; class=&quot;headerlink&quot; title=&quot;缓冲区是什么&quot;&gt;&lt;/a&gt;缓冲区是什么&lt;/h1&gt;&lt;p&gt;​        &lt;strong&gt;缓冲区&lt;/strong&gt;（Buffer)是内存空间的一部分。也就是说，在内</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>伤心的一天</title>
    <link href="http://rainemotion.github.io/2024/04/22/Extremly%20depressed/"/>
    <id>http://rainemotion.github.io/2024/04/22/Extremly%20depressed/</id>
    <published>2024-04-22T11:39:09.047Z</published>
    <updated>2024-04-23T15:29:17.696Z</updated>
    
    <content type="html"><![CDATA[<p><strong>郁闷</strong>！😥(´。＿。｀)</p><p><strong>不解</strong>！😭::&gt;_&lt;::</p><p><strong>伤心</strong>！🥲ಥ_ಥ</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;郁闷&lt;/strong&gt;！😥(´。＿。｀)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不解&lt;/strong&gt;！😭::&amp;gt;_&amp;lt;::&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;伤心&lt;/strong&gt;！🥲ಥ_ಥ&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>初出茅庐</title>
    <link href="http://rainemotion.github.io/2023/11/12/hello-world/"/>
    <id>http://rainemotion.github.io/2023/11/12/hello-world/</id>
    <published>2023-11-12T10:08:38.307Z</published>
    <updated>2024-04-22T12:22:23.688Z</updated>
    
    <content type="html"><![CDATA[<p>博客初建，尚未完善。作为第一篇文章，就以“初出茅庐”为题，浅谈这几个月在学校的感受。</p><p>-<em><strong>生活</strong></em></p><p>还行，就是宿舍有点low.</p><p>-<em><strong>学习</strong></em></p><p>一般般，就是需要学的确实太多了，Math or C,that is the question.</p><p>-<em><strong>游戏</strong></em></p><p>针不戳，从进校前100个小时的打劫，到如今的400多个小时，爽！</p><p>-<em><strong>总结</strong></em></p><p>“遇事不决，可问春风”，希望我能在学习和娱乐中不负青春，奋斗前行，干就完了！    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;博客初建，尚未完善。作为第一篇文章，就以“初出茅庐”为题，浅谈这几个月在学校的感受。	&lt;/p&gt;
&lt;p&gt;-&lt;em&gt;&lt;strong&gt;生活&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;还行，就是宿舍有点low.	&lt;/p&gt;
&lt;p&gt;-&lt;em&gt;&lt;strong&gt;学习&lt;/strong&gt;&lt;/e</summary>
      
    
    
    
    
  </entry>
  
</feed>
